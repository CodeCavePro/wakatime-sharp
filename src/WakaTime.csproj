<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>
        <OutputPath>..\bin\$(Configuration)\</OutputPath>
        <AssemblyName>WakaTime</AssemblyName>
        <AssemblyVersion>8.0.0</AssemblyVersion>
        <RootNamespace>WakaTime</RootNamespace>
    </PropertyGroup>

    <PropertyGroup>
        <PackOnBuild>true</PackOnBuild>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageId>WakaTime</PackageId>
        <Title>WakaTime</Title>
        <Description>A core implementation of all WakaTime C#-driven plug-ins for IDE such as Visual Studio, Xamarin Studio, Monodevelop etc</Description>
        <Summary>A core implementation of all WakaTime C#-driven plug-ins for IDE such as Visual Studio, Xamarin Studio, Monodevelop etc. This plug-ins will help to collect metrics, insights and time tracking automatically generated directly from your programming activity.</Summary>
        <Version>8.0.0</Version>
        <FileVersion>8.0.0</FileVersion>
        <Authors>Zhmayev Yaroslav aka Salaros</Authors>
        <Company>CodeCave, PUE</Company>
        <Owners>salaros,CodeCave</Owners>
        <Copyright>Copyright 2016 (c) CodeCave, PUE</Copyright>
        <PackageIconUrl>https://raw.githubusercontent.com/CodeCavePro/wakatime-sharp/master/content/wakatime-120.png</PackageIconUrl>
        <PackageLicenseUrl>https://github.com/CodeCavePro/wakatime-sharp/blob/master/LICENSE.txt</PackageLicenseUrl>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <PackageProjectUrl>https://github.com/CodeCavePro/wakatime-sharp</PackageProjectUrl>
        <RepositoryUrl>https://github.com/CodeCavePro/wakatime-sharp</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <PackageTags>wakatime,monodevelop,xamarin studio,ide,visual studio,visual studio for mac,dotnet,unity,notepad++,notepadplusplus,editor,source code,time logging,time,logging,insights,metrics</PackageTags>
        <NeutralLanguage>en</NeutralLanguage>
    </PropertyGroup>

    <!-- A workaround for "full" .NET Framework targets to try to fallback on Mono before failing -->
    <PropertyGroup Condition="'$(OS)' != 'Windows_NT' And $(TargetFramework.StartsWith('net'))">
        <!-- Look up for Mono installations on Linux or macOS -->
        <MonoPath Condition="'$(MonoPath)' == '' And Exists('/usr/lib/mono')">/usr/lib/mono</MonoPath>
        <MonoPath Condition="'$(MonoPath)' == '' And Exists('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</MonoPath>
        <!-- Try to apply framework override fo supported targets if Mono was found -->
        <FrameworkPathOverride Condition="'$(MonoPath)' != '' And '$(TargetFramework)' == 'net40'">$(MonoPath)/4.0-api</FrameworkPathOverride>
        <FrameworkPathOverride Condition="'$(MonoPath)' != '' And '$(TargetFramework)' == 'net45'">$(MonoPath)/4.5-api</FrameworkPathOverride>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Salaros.ConfigParser" Version="0.3.1" />
        <PackageReference Include="Newtonsoft.Json" Version="11.0.2" Condition="'$(TargetFramework)' != 'net45'" />
        <PackageReference Include="DotNetZip" Version="1.11.0" Condition="'$(TargetFramework)' == 'net40'" />
        <Reference Include="System.Web.Extensions" Condition="'$(TargetFramework)' == 'net45'" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' != 'net40'">
        <Compile Remove="IProgress.cs" />
        <None Include="IProgress.cs" />
    </ItemGroup>

    <Target Name="CleanNuGetFiles" AfterTargets="Clean">
        <ItemGroup>
            <NuGetFilesBin Include="$(OutputPath)\..\*.nupkg" />
        </ItemGroup>
        <Message Text="Deleting NuGet files from $(OutputPath)\..\*.nupkg" Importance="high" />
        <Delete Files="@(NuGetFilesBin)" />
        <Delete Files="@(NuGetFilesProject)" />
    </Target>
</Project>
